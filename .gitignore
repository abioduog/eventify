# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for commiting if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# .aidigestignore

```
# Exclude build and dependency directories
.next/
node_modules/

# Exclude specific configuration files
.eslintrc.json
.gitignore
components.json
next.config.js
postcss.config.mjs
tailwind.config.ts
tsconfig.json

# Exclude miscellaneous files
README.md

# Exclude any other unwanted files or patterns
*.log

```
# docker-compose.yml

```yml
services:
  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eventify
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "listen_addresses=*"]

volumes:
  postgres_data:
```

# init.sql 

```sql 
-- init.sql
CREATE USER eventify_admin WITH PASSWORD 'eventify_password' SUPERUSER;
CREATE DATABASE eventify;
\c eventify;

-- Create schema and set permissions
CREATE SCHEMA IF NOT EXISTS public;
ALTER SCHEMA public OWNER TO eventify_admin;
GRANT ALL ON SCHEMA public TO eventify_admin;
```

# jsconfig/jsconfig.json

```json
{
    "compilerOptions": {
      "baseUrl": ".",
      "paths": {
        "@/*": ["./src/*"]
      }
    }
  }
```

# next-env.d.ts

```ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.


```

# package.json

```json
{
  "name": "eventify",
  "version": "0.1.0",
  "private": true,
  "prisma": {
    "seed": "ts-node --transpile-only prisma/seed.ts"
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "seed": "ts-node --transpile-only prisma/seed.ts"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@prisma/client": "^5.21.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.1",
    "bcryptjs": "^2.4.3",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "jose": "^5.9.6",
    "jsonwebtoken": "^9.0.0",
    "lucide-react": "^0.453.0",
    "next": "15.0.1",
    "next-themes": "^0.3.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.53.1",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20.17.0",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "prisma": "^5.21.1",
    "tailwindcss": "^3.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.6.3"
  }
}

```

# prisma/schema.prisma

```prisma
generator client {
  provider = "prisma-client-js"
```